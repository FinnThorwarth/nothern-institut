prototype(WG.Site:Component.Header) < prototype(Neos.Fusion:Component) {
    homeLink = Neos.Neos:NodeUri {
        node = ${site}
    }
    menuItems = Neos.Neos:MenuItems {
        startingPoint = ${site}
        maximumLevels = 3
    }

    // Logo Referenzieren
    includeLogo = Neos.Fusion:Tag {
      tagName = 'img'
      attributes {
        src = Neos.Fusion:ResourceUri {
          path = 'resource://WG.Site/Public/Frontend/images/logo.svg'
        }
      }
    }


  // Header Img 
	lazy = ${q(node).prev().is()}

    headerImageSrc = Neos.Fusion:Case {
        image {
            condition = ${q(node).property('headerImage') ? true : false}
            renderer = Sitegeist.Kaleidoscope:AssetImageSource {
                asset = ${q(node).property('headerImage')}
            }
        }
        dummyImage {
            condition = ${site.context.inBackend || !site.context.inBackend}
            renderer = Sitegeist.Kaleidoscope:ResourceImageSource{
               path = 'resource://WG.Site/Public/Frontend/images/fallback.jpg'
            }
        }
    }

   imageAlt = ${String.isBlank( q(node).property('alternativeText') ) ? this.image.caption : q(node).property('alternativeText')}

  // Header Img ENDE

    ##
    # If you want to use a default rendering for a menu, you can just use:
    ##
    # <Neos.Neos:Menu
    #     startingPoint={site}
    #     attributes.class="navigation"
    #     normal.attributes.class="navigation-item"
    #     active.attributes.class="navigation-item navigation-item--state-active"
    #     current.attributes.class="navigation-item navigation-item--state-current"
    #     />
    ##

    renderer = afx`
        <header class="main-header">
        <div class="header-wrapper">
          <div class="grid-container position-relative">
            <div class="grid-x align-middle">
              <div class="cell small-3">
                <a id="nav-icon" class="menu-trigger">
                  <span></span>
                  <span></span>
                  <span></span>
                  <span></span>
                  <span></span>
                  <span></span>
                </a>
              </div>
               <div class="cell small-6 large-4">
                <a class="logo page-logo" href={props.homeLink}>
                  {props.includeLogo}
                </a>
              </div>
              <div class="cell small-3 large-offset-2 text-right">
                <div class="lang-nav">
                  <WG.Site:Component.Header.LanguageMenu />
                </div>
              </div>
            </div>
            </div>
            </div>
              <WG.Site:Component.Header.MenuItemsRenderer items={props.menuItems} />
            <picture class="header-image" @if.hasMaps={props.headerImageSrc}>
              <source srcset={props.headerImageSrc.setWidth(420).setHeight(280).src()} media="(max-width: 420px)" />
              <source srcset={props.headerImageSrc.setWidth(799).setHeight(480).src()} media="(max-width: 799px)" />
              <source srcset={props.headerImageSrc.srcset('800w,1240w,1440w')} media="(min-width: 800px)" />
              <source srcset={props.headerImageSrc.srcset('1920w,2500w')} media="(min-width: 1900px)" />
              <img src={props.headerImageSrc.src()} />
            </picture>
             <picture class="header-image" @if.hasMaps={!props.headerImageSrc}>
              <source srcset={props.headerImageSrc.setWidth(420).setHeight(280).src()} media="(max-width: 420px)" />
              <source srcset={props.headerImageSrc.setWidth(799).setHeight(480).src()} media="(max-width: 799px)" />
              <source srcset={props.headerImageSrc.srcset('800w,1240w,1440w')} media="(min-width: 800px)" />
              <source srcset={props.headerImageSrc.srcset('1920w,2500w')} media="(min-width: 1900px)" />
              <img src={props.headerImageSrc.src()} />
            </picture>
        </header>
    `

	@cache {
		mode = 'cached'
		entryIdentifier {
			documentNode = ${documentNode}
		}
		entryTags {
			1 = ${Neos.Caching.nodeTypeTag('Neos.Neos:Document', documentNode)}
		}
	}
}
